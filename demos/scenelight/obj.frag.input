#version 400

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

const int MAX_MATERIALS_PER_MODEL = 4;
const int MAX_MODELS = 1024;
const int NUM_LIGHTS = 2;

INCLUDE(../../data/glsl/lighting.glsl)

layout(std140, set = 1, binding = 1) uniform material_ubo
{
   Material materials[MAX_MATERIALS_PER_MODEL * MAX_MODELS];
} Mat;

layout(std140, set = 2, binding = 0) uniform light_ubo
{
   Light lights[NUM_LIGHTS];
} L;

// FIXME: this should have been a single binding with an array of samplers
// but Mesa fails to compile that at present.
layout(set = 3, binding = 0) uniform sampler2D shadow_map0;
layout(set = 3, binding = 1) uniform sampler2D shadow_map1;

layout(location = 0) in vec3 in_normal;
layout(location = 1) flat in uint in_material_idx;
layout(location = 2) in vec4 in_world_pos;
layout(location = 3) in vec3 in_view_dir;
layout(location = 4) flat in uint in_receives_shadows;
layout(location = 5) in vec4 in_light_space_pos[NUM_LIGHTS];

layout(location = 0) out vec4 out_color;

void main()
{
   Material mat = Mat.materials[in_material_idx];

   out_color = vec4(0.0, 0.0, 0.0, 1.0);
   for (int i = 0; i < NUM_LIGHTS; i++) {
      Light light = L.lights[i];

      LightColor color;
      if (light.casts_shadows) {
         vec4 light_space_pos = in_light_space_pos[i];
         // FIXME: simplify this once we can use a sampler array
         if (i == 0) {
            color = compute_lighting(light,
                                     in_world_pos.xyz,
                                     in_normal, in_view_dir,
                                     mat,
                                     bool(in_receives_shadows),
                                     light_space_pos, shadow_map0);
         } else {
            color = compute_lighting(light,
                                     in_world_pos.xyz,
                                     in_normal, in_view_dir,
                                     mat,
                                     bool(in_receives_shadows),
                                     light_space_pos, shadow_map1);
         }
      } else {
            color = compute_lighting(L.lights[i],
                                     in_world_pos.xyz,
                                     in_normal, in_view_dir,
                                     mat);
      }
      out_color.xyz += color.diffuse + color.ambient + color.specular;
   }
}
