#version 450

#extension GL_ARB_separate_shader_objects : enable

INCLUDE(../../data/glsl/lighting.glsl)
INCLUDE(pbr.glsl)

layout(location = 0) in      vec3 in_normal;
layout(location = 1) in      vec2 in_uv;
layout(location = 2) in      vec3 in_world_pos;
layout(location = 3) in      vec3 in_view_dir;
layout(location = 4) in flat uint in_row;
layout(location = 5) in flat uint in_col;

const uint NUM_OBJECTS_X = 8;
const uint NUM_OBJECTS_Y = 8;
const uint NUM_LIGHTS = 4;

layout(std140, set = 0, binding = 2) uniform l_ubo {
    Light Lights[NUM_LIGHTS];
} LI;

layout(set = 1, binding = 0) uniform sampler2D tex_albedo;
layout(set = 1, binding = 1) uniform sampler2D tex_normal; /* unused */
layout(set = 1, binding = 2) uniform sampler2D tex_roughness;
layout(set = 1, binding = 3) uniform sampler2D tex_metallic;

layout(set = 2, binding = 0) uniform sampler2D tex_equirect_irradiance_map;

layout(location = 0) out vec4 out_color;

void main()
{
   vec3 N = normalize(in_normal);
   vec3 V = normalize(in_view_dir);

   vec3 albedo = texture(tex_albedo, in_uv).rgb;
   float metallic = texture(tex_metallic, in_uv).r;
   float roughness = texture(tex_roughness, in_uv).r;

   // Compute output radiance from direct lighting
   vec3 Lo = vec3(0.0);
   for (int i = 0; i < NUM_LIGHTS; i++) {
      Light light = LI.Lights[i];

      Lo += compute_lighting_directional_pbr(light,
                                             in_world_pos,
                                             N,
                                             V,
                                             albedo,
                                             metallic,
                                             roughness);
   }

   // Compute output radiance from ambient light
   vec3 ambient =
      compute_ambient_ibl(N, V, albedo, metallic, roughness,
                          tex_equirect_irradiance_map);

   // Merge diffuse and ambient output
   vec3 color = ambient + Lo;

   // Tone mapping for LDR display
   color = color / (color + vec3(1.0));
   out_color = vec4(color, 1.0);
}
